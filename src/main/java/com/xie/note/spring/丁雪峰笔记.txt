5、如何配置数据源
    （1）单个数据源
        springboot:
            //pom
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jdbc</artifactId>
            </dependency>
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <scope>runtime</scope>
            </dependency>
            //java
            @Autowired
            private DataSource dataSource;
            //properties
            spring.datasource.url=jdbc:h2:mem:testdb
            spring.datasource.username=sa
            spring.datasource.password=
            spring.datasource.hikari.maximumPoolSize=5
            spring.datasource.hikari.minimumIdle=5
            spring.datasource.hikari.idleTimeout=600000
            spring.datasource.hikari.connectionTimeout=30000
            spring.datasource.hikari.maxLifetime=1800000


        spring中配置数据源：
        方式1：
            import javax.sql.DataSource;
            @Autowired
            private DataSource dataSource;
            @Bean(destroyMethod = "close")
            public DataSource dataSource() throws Exception {
                Properties properties = new Properties();
                properties.setProperty("driverClassName", "org.h2.Driver");
                properties.setProperty("url", "jdbc:h2:mem:testdb");
                properties.setProperty("username", "sa");
                return BasicDataSourceFactory.createDataSource(properties);
            }
（2）多个数据源
    1、屏蔽自带的datasource
        @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class,
                DataSourceTransactionManagerAutoConfiguration.class,
                JdbcTemplateAutoConfiguration.class})
    2、自定义datasource和trxbean
         @Bean
            public DataSource fooDataSource() {
                DataSourceProperties dataSourceProperties = fooDataSourceProperties();
                log.info("foo datasource: {}", dataSourceProperties.getUrl());
                return dataSourceProperties.initializeDataSourceBuilder().build();
            }

            @Bean
            @Resource
            public PlatformTransactionManager fooTxManager(DataSource fooDataSource) {
                return new DataSourceTransactionManager(fooDataSource);
            }

            @Bean
            @ConfigurationProperties("bar.datasource")
            public DataSourceProperties barDataSourceProperties() {
                return new DataSourceProperties();
            }

            @Bean
            public DataSource barDataSource() {
                DataSourceProperties dataSourceProperties = barDataSourceProperties();
                log.info("bar datasource: {}", dataSourceProperties.getUrl());
                return dataSourceProperties.initializeDataSourceBuilder().build();
            }

            @Bean
            @Resource
            public PlatformTransactionManager barTxManager(DataSource barDataSource) {
                return new DataSourceTransactionManager(barDataSource);
            }
    3、配置文件
        foo.datasource.url=jdbc:h2:mem:foo
        foo.datasource.username=sa
        foo.datasource.password=
        bar.datasource.url=jdbc:h2:mem:bar
        bar.datasource.username=sa
        bar.datasource.password=
7、HikariCP
springboot2
    默认使用了HikariCP
    配置spring.datasource.hikari.*
springboot1
    在pom文件中，默认使用了tomcat，如果改动需要移除tomcat依赖
    将spring.datasource.type=com.zaxxer.hikari.HikariDataSource

8、Durid
    优点：
        详情的监控
        ExceptionSorter，针对主流数据库返回码都支持
        SQL防注入
        内置加密支持
        众多扩展点，方便进行定制
    配置方式：
        （1）Spring的bean当中配置DuridDataSource
        （2）springboot使用durid-spring-boot-starter;
            配置文件中配置spring.datasource.durid.*
    如何选择连接池：
        可靠性，性能，功能，监控；可运维性，可扩展性，其他；
9、spring jdbc访问数据库
    主要包含：
        core,JdbcTemplate等相关核心接口和类
        datasiource，数据源相关的辅助类
        object，将基本的jdbc操纵封装成对象
        support,错误码等其他辅助工具
    常用bean注解：
        @Componment:通用的注解，定义通用的bean
        @Respository:dao，数据库相关的操作
        @Service：一些内部的服务
        @Controller：spring mvc
            @RestController
    JdbcTemplate
        query
        queryForObject
        queryForList
        update:更新删除
        execute
    代码
        JdbcTemplate
        NamedParameterJdbcTemplate

10、Spring事务抽象
    事务抽象的核心接口
        PlatformTransacionManager
            DataSourceTransactionManager
            d
            JtdTransactionManager
        TransactionDefinition
            Propagation
            Isolation
            Timeout
            Read-only satatus

    事务传播特性，7种
        requried:当前有事务就用当前的，没有就用新的
        supports:事务可有可无，不是必须的
        mandatory:当前一定要有事务，没有就抛出异常
        requires_new：无论是否有，都起一个新事务
        not_supported:不支持事务，按照非事务方式运行
        never:不支持事务，如果有就抛出异常
        nested:里面回滚，不影响大事务
    事务隔离特性（取决于数据库）：
        串行
        可重复读
        不可重复度
        脏读（读未提交）
11、Spring事务抽象下
    编程式事务
        TransactionTemplate
        PlatFromTransactionManager
            传入TransacrtionDefinition
    声明式事务
        本质上式通过AOP增强了类的功能
        Spring的AOP本质上就是为类做了一个代理
            看似在调用给自己的类，实际上式用的增强后的代理类
            访问增强后的代理类的方法，而废直接访问自身的方法
        xml方式
            @EnableTransactionmanagerManagement

        @Transactional
            transactionManager
            propagation
12、Spring的JDBC异常抽象
    Spring会将数据操作的异常转为DataAccessException
    通过SQLErrorCodeSQLExcetpionTranslator
    ErrorCode定义
        org.springframework.jdbc.sql-error-codex.xml
        classpath下可以定义sql-error-codex.xml覆盖jdbc包下的

20、通过MyBatis操作数据库
    认识MyBatis
        一款优秀的持久层框架
        支持定制的SQL、存储过程和高级映射
    在Spring中使用MyBatis
        MyBatis Spring Adapter
        MyBatis Spring-Boot-Starter
    定制sql支持性较好，如果dba要求严格，可以考虑使用MyBatis
    简单配置
        //设置映射文件
        • mybatis.mapper-locations = classpath*:mapper/**/*.xml
        • mybatis.type-aliases-package = 类型别名的包名
        //类型转换使用的辅助类
        • mybatis.type-handlers-package = TypeHandler扫描包名
        //下划线转驼峰规则
        • mybatis.configuration.map-underscore-to-camel-case = true
    Mapper的定义和扫描
        @MapperScan配置扫描配置
        @Mapper定义接口
        映射的定义--XML与注解
        @Mapper,@Insert,@Options,@Select
    BaseTypeHandler
        继承此接口可实现类型转换
        mybatis.type-handlers-package=
    一些代码：
        @Mapper
        public interface CoffeeMapper {
            @Insert("insert into t_coffee (name, price, create_time, update_time)"
                    + "values (#{name}, #{price}, now(), now())")
            @Options(useGeneratedKeys = true)
            int save(Coffee coffee);

            @Select("select * from t_coffee where id = #{id}")
            @Results({
                    @Result(id = true, column = "id", property = "id"),
                    @Result(column = "create_time", property = "createTime"),
                    // map-underscore-to-camel-case = true 可以实现一样的效果
                    // @Result(column = "update_time", property = "updateTime"),
            })
            Coffee findById(@Param("id") Long id);
        }
    分页工具：

26、在Spring中访问redis

39、编写第一个Spring Mvc
    DispatchServlet:所有请求的一个入口
        Controller
        xxxResolver
            ViewResolver
            HandlerExceptionResolver
            MultipartResolver
        HandlerMappingL映射处理
    常用注解：
        @Controller：定义控制器
            @RestController：结合了controller和responseBody
        @RequestMapping：我这个controller要处理哪一些请求
            @GetMapping,@PostMapping
            @DeleteMapping,@PutMapping
        @RequestBody：请求的报文体
        @ResponseBody：响应的报文体
        @ResponseStatus：指定请求返回http响应码

40、Spring应用上下文
    依赖注入也是通过SpringContext来实现的，配置文件或者配置获取组件间的以来信息，applicationContext负责注入
    上下文中常用的接口和实现
    BeanFactory
        DefaultListableBeanFactory
    ApplicationContext
        ClassPathXmlApplicationContext：通过classpath下的xml配置文件
        FileSystemXmlApplicationContext：在文件系统中寻找xml文件
        AnnotationConfigApplicationContext：从注解中获取
    WebApplicationContext

    一般情况下我们不会直接使用BeanFactory，我们一般都是通过使用ApplicationContext的一些实现类；
    里面会对BeanPostProcessor和BeanFactoryPostProcessor的一些自动的注册的功能（springboot里会详细说明）

    Web上下文的层次关系：
    DispatcherServlet
    Servlet WebApplicationContext：存放spring mvc相关的bean
        Controllers
        ViewResolver
        HandlerMapping
    Root WebAppitlicationContext
        Services
        Repositories
    Servlet会继承Root，在servlet当中找不到某个bean时候它会到root中做寻找；
    如果我定义了AOP拦截在servlet，但是拦截的目标出现在root里，增强是否会生效
    xml:
        root:ContextLoaderListener
            service,dao相关
        servlet:DispatchServlet
    代码方式（Configuration）：
        RootConfig.class
        App1Config.class
    示例：context-hierarchy-demo
        @EnableAspectJAutoProxy
        @ComponentScan
    如果是希望对底层的那些bean做增强，增强AOP的这些配置配置在底层上下文当中；
    如果是希望对上层，那么就配置在上层；
    如果是通用的，两个上下文当中都开启AOP的增强，但是把Aspect定义在Root的Application
    ？？？？

41、理解请求的处理机制
    1、个请求的大致处理流程
    （1）绑定一些attribute
        WebApplicationContext/LocaleResolver/ThemeResolver
    （2）处理Multipart
        如果是，将请求转为MultipartHttpServlet
    （3）Handler处理
        如果找到Handler，执行Controller及前后置处理器逻辑
    （4）处理返回的Model，呈现视图

42、如何定义处理方法上
    1、定义映射关系
        @Controller
            标志该层为表现层或者控制层；具有component的基础含义，被spring管理，当成bean注入到spring容器中；可以让该类中的方法返回String，该String默认就是view-name
            @RestController: @Controller，@ResponseBody
        @RequestMapping
            path(value): 指定请求的实际访问地址，默认@RequestMapping("url")的值url即为value的值
            method:请求的method的类型，主要有：GET、POST、DELETE、PUT
            params：指定request中必须包含某些参数值，包含才让该方法处理请求
            headers：指定request中必须包含某些指定的header值，包含才能让该方法处理请求。
            consumes：指定处理请求的提交内容类型（Content-Type），例如：application/json, text/html;
            produces：指定返回的内容类型，当且仅当request请求头中的(Accept)类型中包含该指定类型才返回；
        一些快捷方式
            @GetMapping：@RequestMapping(method = RequestMethod.GET)
            @PostMapping：@RequestMapping(method = RequestMethod.POST)
            @PutMapping：@RequestMapping(method = RequestMethod.PUT)
            @DeleteMapping：@RequestMapping(method = RequestMethod.DELETE)
            @PatchMapping：@RequestMapping(method = RequestMethod.PATCH)
    2、请求相关
        @RequestParam：
            常用来处理简单类型的绑定，通过request.getParameter() 获取的String可直接转换为简单类型的情况
            用来处理Content-Type: 为application/x-www-form-urlencoded编码的内容，提交方式GET、POST；
            defaultValue 表示设置默认值，required通过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。
        @RequestBody：
            该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；
            它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。
            (使用FormHttpMessageConverter可以处理application/x-www-form-urlencoded)
        @RequestHeader
            可以把Request请求header部分的值绑定到方法的参数上
            public void displayHeaderInfo(@RequestHeader("Accept-Encoding") String encoding, @RequestHeader("Keep-Alive") long keepAlive)
        @CookieValue
            绑定 cookie 的值到 Controller 方法参数
            public String testCookieValue(@CookieValue ( "hello" ) String cookieValue, @CookieValue String hello)
        @PathVariable：
            用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数

        RequestEntity
            表示完整的请求报文（用的少，几乎不用）
            其中getHeaders()获取请求报文的请求头信息
            其中getBody()获取请求报文的请求体信息
    3、返回相关
        @ResponseBody：
            将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。
        @ResponseStatus
            指定控制器方法抛出异常时的 HTTP 状态码
            （1）和@RequestMapping配合
                如果不使用，默认返回200，表示浏览器中共南昌渲染试图
                如果使用，不设定200，浏览器仍可正常渲染试图，但是可回调error函数
            （2）和@ExceptionHandler配合
                和1区别不大
            （3）加在自定义异常上面
                如果不加，在代码中直接抛出该自定义异常，会以500的HTTP状态码响应到浏览器
                如果加，在代码中直接抛出该自定义异常，会以指定的HTTP状态码和指定的reason响应到浏览器
        ResponseEntity
            ResponseEntity 设置响应到浏览器的响应报文
            ResponseEntity类型用在控制器方法的返回值，返回的ResponseEntity就是响应到浏览器的响应报文。

43、如何定义处理方法下（没看懂，需要刷视频；例子：more-complex-controller-demo）
    类型转换WebMvcConverter（MoneyFormatter.java）
        Spring Boot 在 WebMvcAutoConfiguration 中实现了⼀个
        添加⾃定义的 Converter
        添加⾃定义的 Formatter
    定义校验
        通过 Validator 对绑定结果进⾏校验
            Hibernate Validator
        @Valid 注解
        BindingResult
            public Coffee addCoffee(@Valid NewCoffeeRequest newCoffee,BindingResult result)
    Multipart 上传
        配置 MultipartResolver
            Spring Boot ⾃动配置 MultipartAutoConfiguration
        ⽀持类型 multipart/form-data
        MultipartFile 类型

44、Spring MVC视图解析机制上
    1、ViewResolver 与 View 接⼝
        AbstractCachingViewResolver：缓存，抽象的基类
        UrlBasedViewResolver
        FreeMarkerViewResolver：freeMarker
        ContentNegotiatingViewResolver:
            根据我可以接受的返回类型来选择一个合适的响应，xml、json的
            把相应的这些请求转给合适的ViewResolver继续做一个处理
        InternalResourceViewResolver
            最后的内置的解析器，它是用来处理JSP还有JSTL的
        这些ViewResolver他们每一个都可以去做一个解析，返回一个View对象，再用View对象做一个呈现
    2、如何做试图解析
        initStrategies()
            initViewResolvers()初始化了对应ViewResolver
            它会加载spring上下文中的所有的ViewResolvers
        doDispatch()
            processDispatchResult()
                视图名到具体视图的一个解析，解析出之后，做一个视图的呈现
                如果没有返回视图的话，尝试RequestToViewNameTranslator
                resolveViewName()解析View对象
                如果有异常，会做一个异常视图的处理

        初始化DispatcherServlet的时候，会初始化ViewResolver

45、Spring MVC视图解析机制下
    使⽤ @ResponseBody 的情况


        后台直接返回pojo对象，前端直接接收为json对象或者字符串，使⽤注解@ResponseBody，此注解不走视图解析器;
        当方法上面没有写ResponseBody,底层会将方法的返回值封装为ModelAndView对象。


        • 在 HandlerAdapter.handle() 的中完成了 Response 输出
            • RequestMappingHandlerAdapter.invokeHandlerMethod()
            • HandlerMethodReturnValueHandlerComposite.handleReturnValue()
            • RequestResponseBodyMethodProcessor.handleReturnValue()
    重定向的视图
        redirect:相当于做了一个http302的跳转，可以认为是客户端发起的重定向的跳转；可能会丢失上一个请i去的request信息
        forward:服务端发起的，浏览器上不会发现变化

46、Spring MVC中的常用视图（上）di's
    messageconverter

47、Spring MVC中的常用视图（下）

49、Spring MVC中的异常处理机制
    核心接口：HandlerExceptionResolver
    实现类：
        SimpleMappingExceptionResolver
        DefaultHandlerExceptionResolver
        ResponseStatusExceptionResolver
        ExceptionHandlerExceptionResolver

    异常处理方法：@ExceptionHandler
    添加位置
        @Controller/@RestController
            优先级高
        @ControllerAdvice/@RestControllerAdvice
            优先级低

    代码：
        @ControllerAdvice
        public class GlobalControllerAdvice {
            @ExceptionHandler(ValidationException.class)
            @ResponseStatus(HttpStatus.BAD_REQUEST)
            public Map<String, String> validationExceptionHandler(ValidationException exception) {
                Map<String, String> map = new HashMap<>();
                map.put("message", exception.getMessage());
                return map;
            }
        }

50、Spring当中的切入点
    （1）核心接口：
        HandlerInterceptor
            boolean preHandle();
                预处理，如权限验证
            void postHandle();
                视图呈现前
            void afterCompletion();
                视图呈现后
    （2）针对@ResponseBody和ResponseEntity
        ResponseBodyAdvice
    （3）针对异步请求的接口
        AsyncHandlerInterceptor
            void afterConcurrentHandlingStarted();
    （4）拦截器的配置方式
        常规方法：
            WebMvcConfigurer.addInterceptors();
        Spring boot中的配置：
            创建一个@Configuration的WebMvcConfigurer配置类
            不能带有@EnableWebMvc（想彻底控制MVC除外）
        代码
            配置类
                @Configuration
                public class InterceptorConfig implements WebMvcConfigurer {
                    @Override
                    public void addInterceptors(InterceptorRegistry registry) {
                        registry.addInterceptor(new CustomerInterceptor())
                            .addPathPatterns("/user/*");
                    }
                }
            拦截器
                @Slf4j
                public class CustomerInterceptor implements HandlerInterceptor {
                    @Override
                    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
                        log.info("preHandle");
                        return HandlerInterceptor.super.preHandle(request, response, handler);
                    }
                    @Override
                    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
                        log.info("postHandle");
                        HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
                    }
                    @Override
                    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
                        log.info("afterCompletion");
                        HandlerInterceptor.super.afterCompletion(request, response, handler, ex);
                    }
                }

63、分布式环境的Session问题
    1、常见方案
        粘性会话 Sticky Session
            Load Balance，让请求落在同一台服务器上
        会话复制 Session Replication
            复制成本，副本可能会不一样，不推荐
        集中会话 Centralized Session
          jdbc,redis设施来存储会话信息
    2、Spring Session
        简化集群的会话管理
        无需绑定容器特地解决方案
        支持的存储：
            Redis,MongoDB,JDBC,Hazelcast
    3、Spring Session的实现原理
        定制HttpSession
        通过定制HttpServletRequest返回定制的HttpSession
            SessionRepositoryRequestWrapper
            SessionRepositoryFilter
            DelegatingFilterProxy
    4、基于Redis的HttpSession
        引入依赖
            spring-session-data-redis
        基本配置
            @EnableRedisHttpSession
            提供RedisConnectioinFactory
            实现AbstractHttpSessionApplicationInitializer
                配置DelegatingFilterProxy
        SpringBoot对session的支持

67、Spring Boot的组成部分
    （1）特性
        方便地创建可独立运行的Spring程序
        内嵌tomcat jetty或undertow
        简化项目的构建配置
        为spring及第三方库提供挂自动配置
        提供生产级特性：如监控
        无需生成代码或者xml配置
    （2）四大核心
        自动配置
        起步依赖：starter dependency
        命令行页面
        Actuator:监控

68、Spring Boot自动配置原理
    自动配置
        基于添加JAR依赖自动对Spring Boot应用程序进行配置
        spring-boot-autoconfiguration
    开启自动配置
        @EnableAutoConfiguration
            exclude = Class<?>[]
                排除自动配置类
        @SpringBootApplication
    自动配置的实现原理
        AutoConfigurationImportSelector
        META-INF/spring.factories
            ***.autoconfigure.EnableAutoConfiguration
        条件注解
            @Conditional
            @ConditionalOnClass
                classpath下面有什么类的时候生效
            @ConditionalOnBean
                spring容器里存在某个特定bean生效
            @ConditionalOnMissingBean
                没有某个bean的时候
            @ConditionalOnProperty
                配置了某些特定属性的时候怎么做
        条件注解示例（datasource）
            DataSourceAutoConfiguration
            @ConditionalOnClass({DataSource.class,EmbeddedDatabaseType.class})
        了解自动配置的情况
            观察自动配置的判断结果
                program arguments : --debug
            ConditionEvaluationReportLoggingListener
                Positive matches
                Negative matches
                Exclusions
                Unconditional classes

68、自定义自动配置类
    （1）主要工作内容
        编写Java Config
            @Configuration
        添加条件
            @Conditional
        定位自动配置
            META-INF/spring.factories
    （2）条件注解大家庭
        条件注解
            @Conditional
        类条件
            @ConditionalOnClass
            @ConditionalOnMissingClass
        属性条件
            @ConditionalOnProperty
        Bean条件
            @ConditionalOnBean
            @ConditionalOnMissingBean
            @ConditionalOnSingleCandidate
        资源条件
            @ConditionalOnResource
        Web应用条件
            @ConditionalOnWebApplication
            @ConditionalOnNotWebApplication
        其他条件
            @ConditionalOnExpression
            @ConditionalOnJava
            @ConditionalOnJndi
        自动配置的执行顺序
            @AutoConfigureBefore
            @AutoConfigureAfter
            @AutoConfigureOrder
    （3）错误分析
        FailureAnalyzer

70、如何在低版本Spring中快速实现类似自动配置的功能
71、了解起步依赖及其实现原理
    兼容和冲突问题
    关于Maven依赖管理的一些小技巧
        了解你的依赖
            mvn dependency:tree
            IDEA Maven Helper插件
        排除特定依赖
            exclusion
        统一管理依赖
            dependencyManagement
            Bill of Materials - bom
        Starter Dependencies
            直接面向功能
72、定制自己的起步依赖
    主要内容
        autoconfigure模块，包含自动故意来
        starter模块，包含纸箱自动高配置模板的依赖以及其他相关依赖
    命名方式
        xxx-spring-boot-autoconfigure
        xxx-spring-boot-starter
    其他
        仅添加必要的依赖

73、深挖Spring Boot的配置加载机制
    xxx
    外化配置加载顺序
        jar包外部的application-{profile}.properties或yml
        jar包内部的application-{profile}.properties或yml
        jar包外部的application-.properties或yml
        jar包内部的application-.properties或yml
        @Configuration类上的@PropertySource
        SpringApplication.setDefaultProperties()设置的默认属性
        默认位置
            ./config,./,classpath/config,classpath的/
        修改名字或者路径
            spring.config.name
            spring.config.location
            spring.config.additional-location
        Relaxed Binding
74、了解配置背后的PropertySource

    定制PropertySource
        实现PropertySource

75、认识Spring Boot的各类Actuator Endpoint
    Actuator
        目的：监控并管理应用程序
        访问方式：HTTP;JMX
        依赖：spring-boot-starter-actuator
    一些常用的EndPoint
        ID 说明 默认开启 默认 HTTP 默认 JMX
        beans 显示容器中的 Bean 列表 Y N Y
        caches 显示应⽤中的缓存 Y N Y
        conditions 显示配置条件的计算情况 Y N Y
        configprops 显示 @ConfigurationProperties 的信息 Y N Y
        env 显示 ConfigurableEnvironment 中的属性 Y N Y
        health 显示健康检查信息 Y Y Y
        httptrace 显示 HTTP Trace 信息 Y N Y
        info 显示设置好的应⽤信息 Y Y Y

        ID 说明 默认开启 默认 HTTP 默认 JMX
        loggers 显示并更新⽇志配置 Y N Y
        metrics 显示应⽤的度量信息 Y N  Y
        mappings 显示所有的 @RequestMapping 信息 Y N Y
        scheduledtasks 显示应⽤的调度任务信息 Y N Y
        shutdown 优雅地关闭应⽤程序 N N Y
        threaddump 执⾏ Thread Dump Y N Y
        heapdump 返回 Heap Dump ⽂件，格式为 HPROF Y N N/A
        prometheus 返回可供 Prometheus 抓取的信息 Y N N/A
    JMX?
76、动手定制Health Indicator
    判断系统的健康状况


77、通过Micrometer获取运行数据
    系统度量指标
    缓存、类加载器、GC、CPU 利⽤率、线程池

78、通过Spring Boot Admin了解程序的运行状态
    Spring Boot的管理工具
    运维人员:普罗米修斯，Zabbix

79、如何定制Web容器参数
    （1）内嵌Web容器
        tomcat，jetty，undertow,netty
    （2）容器的配置
        端口
            server.port
            server.address
        压缩
            server.compression.enabled
            server.compression.min-response-size
            server.compression.mime-types
        编程的方式配置
            xxx

80、Http/2上
    https的支持
    http各种版本和https

-------------------------
86、简单理解微服务
    微服务就是一些协同工作的小而自治的服务
    微服务的优点
        异构型
            语言，存储
        弹性
            一个组件不可用给，不会导致级联故障
        扩展
            单体服务不易扩展，多个较小的服务可以按照需求扩展
        其他
            易于部署
            与组织结构对其
            可结合性
            可替代性
    代价
        分布式系统的复杂性
        开发、测试等诸多研发中的复杂性
        部署、监控等诸多运维的复杂性
    Sam Newman的微服务实战

87、如果理解云原生（Cloud Native）
    xxx
    云原生应用要求
        DevOps
            开发与运维一同致力于交付高品质的软件服务于客户
        持续交付
            软件的构建、测试和发布，要更快、更频繁和更稳定
        微服务
            以一组小型服务的形式来部署应用
        容器
            提供比传统虚拟机更高的效率

88、Factor App上
    为了构建SaaS应用提供有效的方法论
    适用于任意语言和后端服务的开发的应用程序
    http://12factor.net/zh_cn
    12-Factor
        基准代码
            一份基准代码，多分部署
        依赖
            显示声明依赖关系
        配置
            在环境中存储配置
        后端服务
            把后端服务当作附件资源
        构建、发布、运行
            严格分离构建和运行
        进程
            以一个或多个无状态的进行运行应用
        端口绑定
            通过端口绑定提供服务
        并发
            通过进行模型进行扩展
        已处理
            快速启动和优化终止可最大化健壮性
        开发环境和线上环境等价
            尽可能保证开发、预发布，线上环境相同
        日志
            把日志当作事件流
        管理进程
            后台管理任务当作一次性进程运行

 90、Spring Cloud的主要功能
    服务发现：eureka,zookeeper,conful,nacos,
    服务熔断:hystrix(不维护)，resilience4j,
    配置服务:git,zk,conful,nacos
    服务安全:springcloudsecurity(auth身份认证的内容)
    服务网关
    分布式消息:springcloudstream,kafka,rabbitmq
    分布式跟踪:tracing
    各种云平台的支持:阿里巴巴，微软云等

    spring cloud的版本号规则
        大工程，其中包含多个独立项目
        bom release train
            london tube stations
            字母排序
            SR:service release
91、使用Eureka作为服务中心
    Eureka概述
        什么是Eureka
            是在AWS上定位服务的REST服务
        Netflix Oss
        Spring对Netflix套件的支持
            spring cloud netflix
    本地启动一个简单的Eureka服务
        Starter
            spring-cloud-dependencies
            spring-cloud-starter-netflix-eureka-starter
        声明
            @EnableEurekaServer
        注意事项
            默认端口8761
            Eureka自己不要注册到Eureka上了
    将服务注册到Eureka
        Starter
            spring-cloud-starter-netflix-eureka-client
        声明
            @EnableDiscoveryClient
            @EnableEurekaClient
        一些配置项
            eureka.client.service-url.default-zone
            eureka.client.instance.prefer-ip-address
        如果没有声明，发现包含一些依赖，也会注册
    关于Bootstrap属性
        属性
            启动引导阶段加载的属性
            bootstrap.properties|.yml
            spring.cloud.bootstrap.name=bootstrap
        常用配置
            spring.application.name=应用名
            配置中心相关

92、使用Spring Cloud Loadbalance访问服务
    如何获得服务地址
        EurekaClient
            getNextServerFromEureka()
        DiscoveryClient
            getInstances();
            //spring cloud提供的一个抽象，获取实例
    Load Balancer Client
        RestTemplate与WebClient
            @LoadBalanced:取得我要调用的目标的地址
        实际是通过ClientHttpRequestInterceptor实现的
            LoadBalancerInterceptor
            LoadBalanceClient
                RibbonLoadBalancerClient
       通过对RestTemplate做了LoadBalancer的一个增强

93、使用Feign访问服务
    Feign
        声明式的Rest Web服务客户端
    Spring Cloud OpenFeign
        spring-cloud-starter-openfeign
    Feign的简单使用
        开启Feign的支持
            @EnableFeignClients
        定义Feign接口
            @FeignClient
            实现远程调用
        简单配置
            FeignClientsConfiguration
            Encoder/Decoder/Logger/Contract/Client...





96、Consul作为注册中心
    介绍
        分布式的、高可用的、能够感知数据中心变化的分布式的设施
        可以用来做链接、配置这样的一些事情；
        能够支持数据中心的，多数据中心
    认识HashiCorp Consul
        Consul
            https:www.consul.io
        关键特性
            服务发现
            健康检查：特定的endpoint,
            KV存储:可以用来做一些配置
            多数据中心
            安全的服务间通讯：加密信息交互
    使用Consul提供服务发现能力
        Http API
        DNS:xxx.service.consul
        与Nginx联动，比如ngx_http_consul_backend_module,nginx的upstream感知
    使用Consul作为注册中心
        Spring Cloud Consul
        简单的配置
97、Nacos作为注册中心
    Nacos
        一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台
    功能
        动态服务配置
        服务发现和管理
        动态DNA服务
    资料
        官网和程序员DD博客
    认识Nacos

    使用Nacos作为注册中心
        Spring Cloud Alibaba
            spring-cloud-alibaba-dependencies
            spring-cloud-starter-alibaba-nacos-discovery
        简单配置
            spring.cloud.nacos.discovery.server-addr

100、使用Hystrix实现服务熔断上
    断路器
       • Circuit Breaker pattern - Release It, Michael Nygard
       • CircuitBreaker, Martin Fowler
       • https://martinfowler.com/bliki/CircuitBreaker.html
   AOP的方式自己写短路保护

101、Netflix Hystrix
    实现了断路器模式
    @HystrixCommand
        fallbackMethod/commProperties
            @HystrixProperty(name)
    Spring Cloud的支持
        spring-cloud-starter-netflix-hystrix
        @EnableCircuitBreaker
    Feign支持
        feign.hystrix.enabled=true
        @FeignClient
            fallback/fallbackFactory
    和eureka一样netflix不在维护了
102、如果观察熔断的情况
    打日志
        在发声熔断时候打印特定日志
    看监控
        主动像监控系统埋点，上报熔断情况
        提供与熔断相关的Endpoint(端点，接口),让第三方系统来拉去信息
    Hystrix Dashboard
        Hystrix Metrics Stream
            spring-boot-starter-actuator
                /actuator/hystrix.stream
        Hystrix Dashboard
            spring-cloud-starter-netflix-hystrix-dashboard
                @EnableHystrixDashboard
                /hystrix
    聚合集群熔断信息
        Netflix Turbine
            spring-cloud-starter-netflix-turbines
                @EnableTurbine
                /turbin.stream?cluster=集群名


103、使用Resilience4j实现服务熔断
    介绍
        一款受Hystrix启发的轻量级且易于使用的容错库
        针对java8与函数式编程设计
    附件组件
        组件名称 功能
        resilience4j-circuitbreaker Circuit breaking
        resilience4j-ratelimiter 频率控制
        resilience4j-bulkhead 依赖隔离&负载保护
        resilience4j-retry ⾃动重试
        resilience4j-cache 应答缓存
        resilience4j-timelimiter 超时控制
        组件名称 功能
        resilience4j-reactor Spring Reactor ⽀持
        resilience4j-micrometer Micrometer Metrics 输出
        resilience4j-prometheus Prometheus Metrics 输出
        resilience4j-spring-boot2 Spring Boot 2 Starter
        resilience4j-feign Feign 适配器
    断路器
        实现
        • 基于 ConcurrentHashMap 的内存断路器
        • CircuitBreakerRegistry：注册断路器
        • CircuitBreakerConfig：配置
        依赖
        • resilience4j-spring-boot2
        • resilience4j-circuitbreaker
        • resilience4j-micrometer
        •
        注解⽅式
        • @CircuitBreaker(name = "名称")
        配置
        • CircuitBreakerProperties
        • resilience4j.circuitbreaker.backends.名称
        • failure-rate-threshold
        • wait-duration-in-open-state
103、使用Resilience4j实现限流上
    Bulkhead（隔舱）
        目的
            防止下游依赖被并发请求冲击
            防止发生连环故障
        用法
            BulkheadRegistry/BulkheadConfig
            @Bulkhead(name="名称")
        配置
            BulkheadProperties
                resilience4j.bulkhead.backends.名称
                    max-concurrent-all
                    max-wait-time

104、使用Resilience4j实现限流下
    RateLimiter
        目的
            限制特定时间段内的执行次数
        用法
            RateLimiterRegistry/RateLimiterConfig
            @RateLimiter(name="名称")
        配置
            • RateLimiterProperties
                • resilience4j.ratelimiter.limiters.名称
                • limit-for-period
                • limit-refresh-period-in-millis
                • timeout-in-millis
107、基于Git的配置中心上
    Spring Cloud Config Server
        目的
            提供针对外置配置的HTTP API
        依赖
            spring-cloud-config-server
                @EnableConfigServer
                支持Git/SVN/Vault/JDBC
        使用Git作为后端存储
            配置
            • MultipleJGitEnvironmentProperties
            • spring.cloud.config.server.git.uri
            配置⽂件的要素
            • {application}，即客户端的 spring.application.name
            • {profile}，即客户端的 spring.profiles.active
            • {label}，配置⽂件的特定标签，默认 master
            HTTP 请求
            • GET /{application}/{profile}[/{label}]
            • GET /{application}-{profile}.yml
            • GET /{label}/{application}-{profile}.yml
            • GET /{application}-{profile}.properties
            • GET /{label}/{application}-{profile}.properties
108、基于Git的配置中心下
    依赖
    • spring-cloud-starter-config
    发现配置中⼼
    • bootstrap.properties | yml
    • spring.cloud.config.fail-fast=true
    • 通过配置
    • spring.cloud.config.uri=http://localhost:8888

    发现配置中⼼
    • bootstrap.properties | yml
    • 通过服务发现
    • spring.cloud.config.discovery.enabled=true
    • spring.cloud.config.discovery.service-id=configserver
    配置刷新
    • @RefreshScope
    • Endpoint - /actuator/refresh

109、基于Zookeeper的配置中心
