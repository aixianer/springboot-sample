一、Token
    1、什么是token
        Token，也称为“令牌”，是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。
    2、为什么使用token
        传统方式即cookie+session的方式，引发的问题比如用户增多导致内存开销较大、CORS(跨域资源共享)以及CSRF(跨站请求伪造)等。
        引入Token验证机制后，请求会发送token而不再是发送cookie能有效够防止CSRF，即使在客户端使用cookie存储token，但cookie也只有存储功能，而不再具备验证功能，因此安全性得到了极大的提高。
        只要token设计的足够复杂，除非用户泄露，否则几乎没有被破解的可能，加上token是有时效的，在有限的时间加上有限的算力，更是无懈可击。
        Token可以有效减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。
    3、token的认证流程
        客户端使用用户名跟密码请求登录
        服务端收到请求，去验证用户名与密码
        验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端
        客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里
        客户端每次向服务端请求资源的时候需要带着服务端签发的 Token
        服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据
    4、token的使用
        每次请求都会将Token放在请求头中一起发送到服务器端，服务器端通过拦截器进行拦截校验，如果不存在Token、Token错误或者Token过期，则拒绝请求，有效则返回相应的返回结果。
    5、Token生成示例
        使用使用用户唯一ID + 系统时间 + 随机数 + 过期时间得到用户信息数据字符串
        对字符串进行RSA非对称加密/AES对称加密得到一个加密字符串
        将加密字符串A再次进行签名等到一个签名数据
        将签名数据和加密字符串进行拼接，最后使用base64进行编码，得到令牌
    6、token和session的比较
        支持跨域访问：cookie是无法跨域的，而token由于没有用到cookie(前提是将token放到请求头中)，所以跨域后不会存在信息丢失问题
        无状态：token机制在服务端不需要存储session信息，因为token自身包含了所有登录用户的信息，所以可以减轻服务端压力
        更适用CDN：可以通过内容分发网络请求服务端的所有资料
        更适用于移动端：当客户端是非浏览器平台时，cookie是不支持的，采用token认证方式会简单很多
        无需考虑CSRF：由于不再依赖cookie，所以采用token认证方式不会发生CSRF，所以也就无需考虑CSRF的防御
二、JWT
    JSON Web Token（JWT）是一个开发标准（RFC 7519），它定义了一种紧凑独立的基于 JSON 对象在各方之间安全地传输信息的方式。
    紧凑
        由于其较小的体积，JWTs 可以通过 URL、POST 参数或 HTTP 头部参数进行传递，体积小也意味着其传输速度会相当快。
    独立
        有效负载包含了所需要的关于用户的所有信息，避免了多次查询数据库的需要。