流：
    IO流：对于数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为输入input 和输出output ，即流向内存是输入流，流出内存的输出流。
    Java中I/O操作主要是指使用java.io包下的内容，进行输入、输出操作。输入也叫做读取数据，输出也叫做作写出数据。
    按代为分
        字节流: 以字节为单位, 可以读写所有数据.
            InputStream
                read(),read(bytes[] bys)
            OutputStream
                write(),   write(byte[] arr),write(bytes[] bys,int index, int length)
        字符流: 以字符为单位, 只能读写文本数据.
    字节流写数据
        1）基本步骤
              创建FileOutputStream对象，关联到一个文件路径
              调用write()方法，写出数据
              调用close()方法，释放资源
              打开文件，查看内容
        （2）三种方式
              write(int b)                一次写一个字节数据
              write(byte[] arr)                 一次写一个字节数组
              write(byte[] arr,int index,int len)     写字节数组的一部分

        （3）两个问题
            如何写换行
                调用write()方法，写出”\r\n”.getBytes()即可
            如何文件续写
                 使用FileOutputStream(String name,boolean append)构造方法
                 构造方法中第二个参数传递true，则在文件末尾继续写数据
         （4）异常处理
            字节流写数据同时处理异常的重要步骤
                 将创建字节流对象和写出数据的代码放在try中
                 在catch中捕获IOException异常
                 在finally中进行释放资源

        字节缓冲流
            字节缓冲流
            （1）基本分类&概述
                BufferedOutputStream
                类实现缓冲输出流。 通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用
                BufferedInputStream
                创建BufferedInputStream将创建一个内部缓冲区数组。 当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节
             （2）构造方法
                BufferedOutputStream(OutputStream out) | 创建字节缓冲输出流对象 |
                BufferedInputStream(InputStream in)    | 创建字节缓冲输入流对象 |
            （3）代码演示
                public class BufferStreamDemo {
                    public static void main(String[] args) throws IOException {
                        //字节缓冲输出流：BufferedOutputStream(OutputStream out)

                        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("myByteStream\\bos.txt"));
                        //写数据
                        bos.write("hello\r\n".getBytes());
                        bos.write("world\r\n".getBytes());
                        //释放资源
                        bos.close();


                        //字节缓冲输入流：BufferedInputStream(InputStream in)
                        BufferedInputStream bis = new BufferedInputStream(new FileInputStream("myByteStream\\bos.txt"));

                        //一次读取一个字节数据
                //        int by;
                //        while ((by=bis.read())!=-1) {
                //            System.out.print((char)by);
                //        }

                        //一次读取一个字节数组数据
                        byte[] bys = new byte[1024];
                        int len;
                        while ((len=bis.read(bys))!=-1) {
                            System.out.print(new String(bys,0,len));
                        }

                        //释放资源
                        bis.close();
                    }
                }

    1、概念
        由于字节流操作中文不是特别的方便，所以Java就提供字符流
        字符流 = 字节流 + 编码表
        （补充）：中文的字节存储方式
        用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？
        汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数
     2、分类
        （1）字符流体系图
            Reader
                read(),read(char[] chs),
                readline()
            Writer
                read(),read(char[] chs,int index,int len),
                newline(),write(String line);
    3、字符缓冲流
        （1）概念
            BufferedWriter
                将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途。
            BufferedReader
                从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。 默认值足够大，可用于大多数用途。
        （2）构造方法
            BufferedWriter(Writer out) | 创建字符缓冲输出流对象 |
            BufferedReader(Reader in)  | 创建字符缓冲输入流对象 |
        （3）代码演示
            public class BufferedStreamDemo01 {
                public static void main(String[] args) throws IOException {
                    //BufferedWriter(Writer out)
                    BufferedWriter bw = new BufferedWriter(new                                                            FileWriter("myCharStream\\bw.txt"));
                    bw.write("hello\r\n");
                    bw.write("world\r\n");
                    bw.close();

                    //BufferedReader(Reader in)
                    BufferedReader br = new BufferedReader(new                                                           FileReader("myCharStream\\bw.txt"));

                    //一次读取一个字符数据
            //        int ch;
            //        while ((ch=br.read())!=-1) {
            //            System.out.print((char)ch);
            //        }

                    //一次读取一个字符数组数据
                    char[] chs = new char[1024];
                    int len;
                    while ((len=br.read(chs))!=-1) {
                        System.out.print(new String(chs,0,len));
                    }

                    br.close();
                }
            }

NIO
    NIO支持面向缓冲区的、基于通道的IO操作。
    NIO将以更加高效的方式进行文件的读写操作。
    NIO可以理解为非阻塞IO,传统的IO的read和write只能阻塞执行，线程在读写IO期间不能干其他事情，比如调用socket.read()时，如果服务器一直没有数据传输过来，线程就一直阻塞，而NIO中可以配置socket为非阻塞模式。
    NIO 与 BIO的比较
        BIO以流的方式处理数据,而NIO以块的方式处理数据,块I/O的效率比流IO高很多
        BIO是阻塞的，NIO则是非阻塞的
        BlO基于字节流和字符流进行操作，而NIO基于Channel(通道)和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。
            Selector(选择器)用于监听多个通道的事件（比如:连接请求，数据到达等)，因此使用单个线程就可以监听多个客户端通道
    NIO 三大核心
        Buffer(缓冲区)
                缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。
                这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。
                相比较直接对数组的操作，Buffer APl更加容易操作和管理。
        Channel(通道)
                Java NIO的通道类似流，但又有些不同:既可以从通道中读取数据，又可以写数据到通道。
                但流的(input或output)读写通常是单向的。
                通道可以非阻塞读取和写入通道，通道可以支持读取或写入缓冲区，也支持异步地读写。
        Selector(选择器)
                Selector是一个ava NIO组件，可以能够检查一个或多个NIO通道，并确定哪些通道已经准备好进行读取或写入。
                这样，一个单独的线程可以管理多个channel，从而管理多个网络连接，提高效率
