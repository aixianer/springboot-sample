一、AOP的特性概念
    通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。
    连接点（Join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。
    切点（PointCut）: 可以插入增强处理的连接点。
    切面（Aspect）: 切面是通知和切点的结合。
    引入（Introduction  x）：允许我们向现有的类添加新的方法或者属性。
    织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的代理对象。
二、初识AOP
    1、切点指示器
        arg()、@arg()、execution()、this()、target()、@target()、within、@within、@annotation
        只有execution指示器是唯一的执行匹配，而其他的指示器都是用于限制匹配的
    2、通知的类型
        @Before、@After、@AfterReturning、@AfterThrowing、@Around
三、配置方式
    1、注解方式
        （1）@Pointcut注解声明切点表达式，然后使用表达式
            如：
                @Aspect
                @Component
                public class BuyAspectJ {

                    @Pointcut("execution(* com.alibaba.spring.aop.IBuy.buy(..))")
                    public void point(){}

                    @Before("point()")
                    public void hehe() {
                        System.out.println("before ...");
                    }
                }
        （2）参数的获取
            @Aspect
            @Component
            public class BuyAspectJ {
                @Pointcut("execution(String com.alibaba.spring.aop.IBuy.buy(double)) && args(price) && bean(girl)")
                public void gif(double price) {
                }
                @Around("gif(price)")
                public String hehe(ProceedingJoinPoint pj, double price){
                    try {
                        pj.proceed();
                        if (price > 68) {
                            System.out.println("女孩买衣服超过了68元，赠送一双袜子");
                            return "衣服和袜子";
                        }
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                    }
                    return "衣服";
                }
            }
        （3）配置织入
            @EnableAspectJAutoProxy() 启用Spring AOP，通过proxyTargetClass的赋值来决定Spring AOP动态代理机制；
            proxyTargetClass为false时，是通过jdk基于接口方式进行织入，这时候代理生成的是一个接口对象；
            proxyTargetClass 为 true时，则会使用 cglib 的动态代理方式，这时候代理生成的是一个继承代理对象， 这种方式的缺点是拓展类的方法被final修饰时，无法进行织入
            如：
                @Configuration
                @EnableAspectJAutoProxy(proxyTargetClass = true)
                public class AppConfig {
                }
    2、xml方式
        （1）切点表达式
            <?xml version="1.0" encoding="UTF-8"?>
            <beans xmlns="http://www.springframework.org/schema/beans"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
                   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

                <bean id="boy" class="com.alibaba.spring.aop.Boy"></bean>
                <bean id="girl" class="com.alibaba.spring.aop.Girl"></bean>
                <bean id="buyAspectJ" class="com.alibaba.spring.aop.BuyAspectJ"></bean>

                <aop:config proxy-target-class="true">
                    <aop:pointcut id="apoint" expression="execution(* com.alibaba.spring.aop.IBuy.buy(..))"/>
                    <aop:aspect id="qiemian" ref="buyAspectJ">
                        <aop:before pointcut-ref="apoint" method="hehe"/>
                        <aop:after pointcut-ref="apoint" method="haha"/>
                        <aop:after-returning pointcut-ref="apoint" method="xixi"/>
                        <aop:around pointcut-ref="apoint" method="xxx"/>
                    </aop:aspect>
                </aop:config>
            </beans>
        （2）参数获取
            <?xml version="1.0" encoding="UTF-8"?>
            <beans xmlns="http://www.springframework.org/schema/beans"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
                   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

                <bean id="boy" class="com.alibaba.spring.aop.Boy"></bean>
                <bean id="girl" class="com.alibaba.spring.aop.Girl"></bean>
                <bean id="buyAspectJ" class="com.alibaba.spring.aop.BuyAspectJ"></bean>

                <aop:config proxy-target-class="true">
                    <aop:pointcut id="apoint" expression="execution(String com.alibaba.spring.aop.IBuy.buy(double)) and args(price) and bean(girl)"/>
                    <aop:aspect id="qiemian" ref="buyAspectJ">
                        <aop:around pointcut-ref="apoint" method="hehe"/>
                    </aop:aspect>
                </aop:config>
            </beans>
        3、配置织入
            CGlib 代理方式：
                <aop:config proxy-target-class="true"> </aop:config>
            JDK 代理方式：
                <aop:config proxy-target-class="false"> </aop:config>
四、Spring AOP 实现原理
    1、静态代理
        静态代理，代理类和被代理类实现了同样的接口，代理类同时持有被代理类的引用，这样，当我们需要调用被代理类的方法时，可以通过调用代理类的方法来做到。
    2、动态代理
        （1）JDK动态代理
            代理类继承InvocationHandler，实现invoke方法
            被代理类（object）传入代理类
            method.invoke(object, args);
            代码示例：
                @Override
                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    System.out.println("object: " + object.getClass().getSimpleName());
                    System.out.println("proxy: " + proxy.getClass().getSimpleName());

                    if ("meeting".equals(method.getName())) {
                        System.out.println("代理先准备会议材料...");
                        return method.invoke(object, args);
                    } else if ("evaluate".equals(method.getName())) {
                        if(args[0] instanceof String) {
                            if ("James".equals(args[0])) {
                                System.out.println("James 犯过错误，所以考评分数较低...");
                                return 70;
                            }
                        }
                        return method.invoke(object, args);
                    }
                    return null;
                }
        （2）CGlib动态代理
            继承MethodInterceptor接口，实现intercept方法，如：
                @Override
                    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
                        if ("meeting".equals(method.getName())) {
                            System.out.println("代理先准备会议材料...");
                            return methodProxy.invokeSuper(o, objects);
                        } else if ("evaluate".equals(method.getName())) {
                            if(objects[0] instanceof String) {
                                if ("James".equals(objects[0])) {
                                    System.out.println("James 犯过错误，所以考评分数较低...");
                                    return 70;
                                }
                            }
                            return methodProxy.invokeSuper(o, objects);
                        }
                        return null;
                    }
            使用代码，定义Enhancer，设置父类和回调；使用create创建被代理的对象；调用
            Enhancer enhancer = new Enhancer(); // 通过CGLIB动态代理获取代理对象的过程
            enhancer.setSuperclass(Leader.class); // 设置enhancer对象的父类
            enhancer.setCallback(new LeaderMethodInterceptor()); // 设置enhancer的回调对象
            Leader proxy= (Leader)enhancer.create(); // 创建代理对象
            // 通过代理对象调用目标方法
            proxy.meeting();
五、Spring AOP和AspectJ比较
    1、比较
        Spring AOP是基于Spring IoC实现的，它解决大部分常见的需求，但它并不是一个完整的AOP解决方案。
        对于非Spring容器管理的对象，它更没有办法了。而AspectJ旨在提供完整的AOP方案，因此也会更复杂。
    2、织入方式
        AspectJ是运行时织入，利用ajc（AspectJ的编译器）
        AOP是运行时织入，主要使用了两种技术：JDK动态代理和CGLIB代理。对于接口使用JDK Proxy，而继承的使用CGLIB。

        因为织入方式的区别，两者所支持的Joinpoint也是不同的。
        像final的方法和静态方法，无法通过动态代理来改变，所以Spring AOP无法支持。
        但AspectJ是直接在运行前织入实际的代码，所以功能会强大很多。
    3、性能
        编译织入会比较运行时织入快很多，Spring AOP是使用代理模式在运行时才创建对应的代理类，效率没有AspectJ高。

