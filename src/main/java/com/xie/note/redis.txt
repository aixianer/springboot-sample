一、Redis为什么那么快？
    （1）内存存储：Redis将数据存储在内存中，使得读写速度非常快。同时，Redis也提供持久化机制，可以将内存数据异步地写入磁盘中，保证数据的安全性和可靠性。
    （2）非阻塞I/O多路复用机制：Redis使用非阻塞I/O模型，避免了线程上下文切换和系统调用带来的开销，从而大幅提高了并发吞吐量。
    （3）单线程架构：Redis采用单线程架构，避免了多线程间的同步和锁竞争等问题，简化了代码实现和维护。
    （4）数据结构优化：Redis内置了多种数据结构（如哈希表、有序集合等），并对其进行了优化，使得操作复杂度低，并能在很短的时间内完成大量的数据处理。
    （5）预分配内存：Redis在初始化时会预先分配一定量的内存空间，避免了频繁的内存分配和释放过程，提高了性能。
二、Redis为什么使用单线程
    官方回复：“Redis的性能瓶颈通常不在CPU上，而是其他因素（如磁盘I/O和网络请求等）限制了系统的性能。”

三、集群实操
1、主从
（1）master（1）
    配置文件
    1)打开配置文件把下面对应的注释掉
    bind 127.0.0.1
    2)保护模式
    protected-mode no
    3)Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程，设置为no
    daemonize no
    4）设置密码
    requirepass 12345678
    4)./redis-server ../redis.conf & 启动
（2）从服务器（2）
    slaveof 10.0.10.7 6379
    # 从redis2.6开始，从节点默认是只读的
    slave-read-only yes
    # 假设主节点有登录密码
    masterauth 12345678
2、哨兵
哨兵故障转移失败日志：
2122:X 28 Dec 2023 06:42:00.395 * Sentinel new configuration saved on disk
12122:X 28 Dec 2023 06:42:28.384 # +sdown slave 10.0.10.13:6379 10.0.10.13 6379 @ mymaster 10.0.10.7 6379
12122:X 28 Dec 2023 06:42:28.384 # +sdown slave 10.0.10.9:6379 10.0.10.9 6379 @ mymaster 10.0.10.7 6379
12122:X 28 Dec 2023 06:43:22.039 # +sdown master mymaster 10.0.10.7 6379
12122:X 28 Dec 2023 06:43:22.172 * Sentinel new configuration saved on disk
12122:X 28 Dec 2023 06:43:22.172 # +new-epoch 1
12122:X 28 Dec 2023 06:43:22.172 * Sentinel new configuration saved on disk
12122:X 28 Dec 2023 06:43:22.172 # +vote-for-leader 2a17815858f929840947e84541284b9ffa450c59 1
12122:X 28 Dec 2023 06:43:23.156 # +odown master mymaster 10.0.10.7 6379 #quorum 3/2
12122:X 28 Dec 2023 06:43:23.156 # Next failover delay: I will not start a failover before Thu Dec 28 06:49:22 2023
12122:X 28 Dec 2023 06:49:22.471 * Sentinel new configuration saved on disk
12122:X 28 Dec 2023 06:49:22.471 # +new-epoch 2
12122:X 28 Dec 2023 06:49:22.472 * Sentinel new configuration saved on disk
12122:X 28 Dec 2023 06:49:22.472 # +vote-for-leader 2a17815858f929840947e84541284b9ffa450c59 2
12122:X 28 Dec 2023 06:49:22.475 # Next failover delay: I will not start a failover before Thu Dec 28 06:55:22 2023
