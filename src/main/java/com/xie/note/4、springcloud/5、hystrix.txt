Hystrix概述
1、概述
    雪崩
        如果扇出的链路上某个微服务的调用响应的时间过长或者不可用，对微服A的调用就会占用越来越多的系统资源，进而引起系统崩溃，即"雪崩效应"
    扇出
        每个服务都可能会调用其它的服务器，服务之间是相互调用相互依赖，构成所谓“扇出”。
    为应对微服务器系统出现“雪崩”事故，使用微服务Hystrix能避免级联故障，以提高分布式系统的弹性。

2、是什么
    hystrix是Netflix开源的一款容错框架，防雪崩利器，具备服务降级，服务熔断，依赖隔离，监控(Hystrix Dashboard)等功能。
    它通过隔离服务间的访问点、防止级联失败和提供回退选项，保证系统的整体弹性。
3、作用
    （1）保护机制：对调用其他服务造成的异常和超时提供保护和控制。
    （2）级联失败：在复杂的分布式系统中防止级联失败。
    （3）服务降级：当必要时fallback和优雅的降级。
    （4）监控：提供实施监控，警告和可选择的控制。
    （5）快速反应：快速失败和迅速恢复。
4、触发条件
    （1）调用超时时间比你自己定义的阈值要长
    （2）线程池满
    （3）服务的错误百分比超过了一个阈值，就会触发一个断路器来停止对特定服务的所有请求
4、Hystrix设计原则
    （1）防止单个依赖耗尽容器内所有用户线程
    （2）降低系统负载，对无法及时处理的请求快速失败（fail fast）而不是排队
    （3）提供失败回退，以在必要时让失效对用户透明化
    （4）使用隔离机制降低依赖服务对整个系统的影响
    （5）针对系统服务的度量、监控和报警，提供优化以满足近实时性的要求
    （6）在 Hystrix 绝大部分需要动态调整配置并快速部署到所有应用方面，提供优化以满足快速恢复的要求
    （7）能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求

5、Hystrix的实现原理
    （1）熔断
        熔断就是具有特定条件的降级，当出现熔断时在设定的时间内不在请求。熔断有自动恢复机制
        采用断路器模式
            断路器最开始处于closed状态，一旦检测到的错误到达一定数量，断路器便转为open状态(断路器打开)；
            此时到达reset timeout时间会转移到half open状态；
            尝试放行一部分请求到后端，一旦检测成功便回归到closed状态，即恢复服务
    （2）服务降级
        当下游服务因某种原因不可用，上游主动调用本地的一些降级逻辑，避免卡顿，迅速返回给用户！
        当下游服务因某种原因响应过慢，下游服务主动停掉一些不太重要的业务，释放出服务器资源，增加响应速度！
        服务熔断可视为降级方式的一种
    （3）隔离
        分为线程池隔离和信号量隔离。通过判断线程池或信号量是否满，超过容量的请求直接降级，从而达到限流
        线程池隔离：
            它的目的是为每个微服务设置各自的线程池，互不影响，这样，如果某个微服务的线程池满了，不会影响其他微服务的线程池，而是调用fallback方法返回。
            引入线程池势必会造成一定的系统压力，因为线程池的上下文切换，调度，排队等会增加系统开销，但是hystrix在设计之初，认为它提供的好处远远可以忽略这些开销。
        信号量隔离：
            它的目的是为每个微服务限流，能够限制并发的请求数。
            信号量隔离使用的其实就是并发框架中的semaphore信号量类，我们通过设定semaphore的信号数，相当于设置了此微服务的并发请求数，每一个微服务进来，都会执行semaphore的acquire方法来获得信号量，同时，返回结果后执行release方法释放信号量。
    （4）请求缓存
        服务A调用服务B，如果在A中添加请求缓存，第一次请求后走缓存，不在访问微服务B，即使出现大量请求，不会对B产生高负荷。请求缓存可以使用spring　cache实现。
    （5）请求合并
        当服务A调用服务B时，设定在５毫秒内所有请求合并到一起，对于服务B的负荷就会减少。使用@HystrixCollapser。方法返回值必须为Future
6、总结
    （1）在项目中一般使用的是Hystrix的熔断和降级
    （2）Hystrix的设计目的就是为了提高系统的弹性和高可用。
        弹性主要体现在Hystrix的熔断、降级、快速恢复和实时监控的功能，当设置了Hystrix的熔断和降级，由于某种原因导致服务熔断后，时间段内之间返回fallback，
        时间段之后Hystrix成半打开状态，检测服务是否可用，
        如果可用，熔断关闭，接收请求，否则，时间段内继续保持熔断开启。
    （3）Hystrix使用了舱壁模式和命令模式
            舱壁模式主要体现在它的隔离理论技术，涉及到线程池隔离和信号量隔离，其中心思想就是将各个微服务独立开，互补干扰，解耦合。
            命令模式体现在Hystrix使用一个@HystrixCommand就将外部系统的所有调用用HystrixCommand对象包裹，该对象通常在一个单独线程中执行。