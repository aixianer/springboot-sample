进程：
    每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）
线程
    同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）
内存
    堆内存、方法区：线程共享
    栈内存：线程独享
线程的生命周期
    新建
        新创建了一个线程对象
    就绪
        就绪状态的线程又叫做可运行状态，表示当前线程具有抢夺CPU时间片的权力（CPU时间片就是执行权）。
    运行
        run方法的开始执行标志着这个线程进入运行状态，当之前占有的CPU时间片用完之后，会重新回到就绪状态继续抢夺CPU时间片，当再次抢到CPU时间之后，会重新进入run方法接着上一次的代码继续往下执行。
    阻塞
        阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。
        三种情况：
            等待阻塞：执行wait()方法，JVM会把该线程放入等待池中
            同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中
            其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态
                当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态
                    sleep是不会释放持有的锁
    死亡
        线程执行完了或者因异常退出了run()方法，该线程结束生命周期。
    锁池
        在这里找共享对象的对象锁线程进入锁池找共享对象的对象锁的时候，会释放之前占有CPU时间片，有可能找到了，有可能没找到，没找到则在锁池中等待，如果找到了会进入就绪状态继续抢夺CPU时间片。

实现方式
    Thread,Runnable
        start
            启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后，瞬间就结束了。线程就启动成功了。
            启动成功的线程会自动调用run方法（由JVM线程调度机制来运作的），并且run方法在分支栈的栈底部（压栈）。
            run方法在分支栈的栈底部，main方法在主栈的栈底部。
            start()方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。
        setName
            设置线程名
        getName
            返回字符串形式的线程名
        Thread.CurrentThread()
            返回当前正在执行的线程对象
    Callable
        使用方式：
            自定义一个类来实现Callable接口，重写call()方法
            创建FutureTask，Thread对象，并把MyCallable对象作为FutureTask类构造方法的参数传递进去，把FutureTask对象传递给Thread对象。
        优缺点
            可以获取到线程的执行结果
            效率比较低，在获取t线程执行结果的时候，当前线程受阻塞，效率较低
线程控制（Thread）
    yield：
        暂停当前正在执行的线程对象，把线程执行机会让出
        yield()方法不是阻塞方法。
        让当前线程让位，让给其它线程使用。
        yield()方法的执行会让当前线程从“运行状态”回到“就绪状态”。
        注意：在回到就绪之后，有可能还会再次抢到。
    sleep：
        使当前正在执行的线程停留指定的毫秒数
        不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会
        不会释放锁
    join：
        在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态
            主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束
    interrupt：
        它只是线线程发送一个中断信号，让线程在无限等待时（如死锁时）能抛出抛出，从而结束线程，但是如果你吃掉了这个异常，那么这个线程还是不会中断的
线程控制（Object）
    需要和synchronized配合操作
        wait,与notify是针对已经获取了Obj锁进行操作
    wait：
        线程在获取对象锁后，主动释放对象锁，同时本线程休眠。
            直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。
    notify：
        唤醒正在某个对象上等待的线程
        notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁
    notifyAll：
        唤醒某个对象上处于等待的所有线程
        不会释放锁

线程的调度
    线程调度模型
        均分式调度模型
            所有的线程轮流使用CPU的使用权，平均分配给每一个线程占用CPU的时间。
        抢占式调度模型（Java采用此模型）
            优先让优先级高的线程使用CPU，如果线程的优先级相同，那么就会随机选择一个线程来执行，优先级高的占用CPU时间相对来说会高一点点。
    优先级的取值范围是1-10
    线程的优先级有继承关系
    setPriority：设置当前线程的优先级
    getPriority：获取当前线程的优先级
线程的安全问题
    引起线程安全问题的三个条件
        是否具备多线程的环境
        是否有共享数据
        是否有多条语句操作共享数据
    不同类型的变量
        实例变量：堆中
            会有线程安全问题
        静态变量：方法区
            会有线程安全问题
        局部变量：栈中
            局部变量不存在线程安全问题，因为局部变量在栈中（一个线程一个栈）不共享
        常量：
            不会有线程安全问题
        成员变量
            可能会有线程安全问题

线程同步
    同步语句块
        synchronized(this){方法体}
    同步方法
        修饰符 synchronized 返回值类型 方法名（形参列表）{方法体}
        这种情况锁的仍是this，代表整个方法体都需要同步，可能会扩大同步范围
        静态同步方法
            类锁永远只有1把
    锁
        private Lock lock = new ReentrantLock()
        lock.lock();
        lock.unlock();//解锁
    扩展之synchronized
        作用域：
            对象实例内
                非静态方法
                如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法
                不同的对象实例的synchronized方法是不相干扰的
            类的范围
                静态方法
                防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。
            方法块
                只对这个区块的资源实行互斥访问，它的作用域是当前对象
        不能被继承
        明确几点
            无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。
            每个对象只有一个锁（lock）与之相关联。
            实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。

参数传递：
    （1）new Thread("name");
    （2）setName("name")
    （3）回调函数


如何解决线程安全问题，三个办法
    （1）尽量使用局部变量代替“实例变量和静态变量”
    （2）如果必须是实例变量，那么可以考虑创建多个对象，这样实例变量的内存就不共享了。（不苟同）
    （3）线程同步机制

死锁
    当两个线程或者多个线程互相锁定的情况就叫死锁
    顺序上锁，反向解锁，不要回头

守护线程
    用户线程
        main方法也是用户线程
    守护线程
        setDaemon(true)
        垃圾回收线程（守护线程）
定时器：
    java.util.Timer
    一般没人用了，很多框架都提供了类似功能


线程池
    线程池就是首先创建一些线程，他们的集合称之为线程池。
        线程池在系统启动时会创建大量空闲线程，程序将一个任务传递给线程池，线程池就会启动一条线程来执行这个任务，
        执行结束后线程不会销毁（死亡），而是再次返回到线程池中成为空闲状态，等待执行下一个任务。
    工作模式
        线程池的编程模式下，任务是分配给整个线程池的，而不是直接提交给某个线程，
        线程池拿到任务后，就会在内部寻找是否有空闲的线程，如果有，则将任务交个某个空闲线程。
    使用线程池的原因
        减少在创建和销毁线程上所花的时间以及系统资源的开销
        当前任务与主线程隔离，能实现和主线程的异步执行，特别是很多可以分开重复执行的任务
            但是，一味的开线程也不一定能带来性能上的，线池休眠也是要占用一定的内存空间，所以合理的选择线程池的大小也是有一定的依据。
    四种方式创建
        newFixedThreadPool 创建一个固定长度的线程池，当到达线程最大数量时，线程池的规模将不再变化。
            newFixedThreadPool与cacheThreadPool差不多，也是能reuse就用，但不能随时建新的线程
            其独特之处:任意时间点，最多只能有固定数目的活动线程存在，此时如果有新的线程要建立，只能放在另外的队列中等待，直到当前的线程中某个线程终止直接被移出池子
            和cacheThreadPool不同，FixedThreadPool没有IDLE机制，所以FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器

        newCachedThreadPool 创建一个可缓存的线程池，如果当前线程池的规模超出了处理需求，将回收空的线程；当需求增加时，会增加线程数量；线程池规模无限制。
            缓存型池子，先查看池中有没有以前建立的线程，如果有，就reuse.如果没有，就建一个新的线程加入池中
            缓存型池子通常用于执行一些生存期很短的异步型任务
                因此在一些面向连接的daemon型SERVER中用得不多。
            能reuse的线程，必须是timeout IDLE内的池中线程，缺省timeout是60s,超过这个IDLE时长，线程实例将被终止及移出池。
                注意，放入CachedThreadPool的线程不必担心其结束，超过TIMEOUT不活动，其会自动被终止。
        newSingleThreadPoolExecutor 创建一个单线程的Executor，确保任务对了，串行执行
            单例线程，任意时间池中只能有一个线程
            用的是和cache池和fixed池相同的底层池，但线程数目是1-1,0秒IDLE（无IDLE）
        newScheduledThreadPool 创建一个固定长度的线程池，而且以延迟或者定时的方式来执行，类似Timer；
            调度型线程池
            这个池子里的线程可以按schedule依次delay执行，或周期执行
    线程池的应用
        newCachedThreadPool
            CachedThreadPool首先会按照需要创建足够多的线程来执行任务(Task)。
            随着程序执行的过程，有的线程执行完了任务，可以被重新循环使用时，才不再创建新的线程来执行任务。
            （没懂）客户端线程和线程池之间会有一个任务队列。当程序要关闭时，你需要注意两件事情：入队的这些任务的情况怎么样了以及正在运行的这个任务执行得如 何了。令人惊讶的是很多开发人员并没能正确地或者有意识地去关闭线程池。正确的方法有两种：一个是让所有的入队任务都执行完毕（shutdown()）， 再就是舍弃这些任务（shutdownNow())——这完全取决于你。比如说如果我们提交了N多任务并且希望等它们都执行完后才返回的话，那么就使用 shutdown()：
        FixedThreadPool
            会使用一个优先固定数目的线程来处理若干数目的任务。
            规定数目的线程处理所有任务，一旦有线程处理完了任务就会被用来处理新的任务(如果有的话)。
            同一时刻最多只有5个线程能运行。并且线程执行完成后就从线程池中移出
        newSingleThreadExecutor
            只能运行一条线程的线程池。
            它能保证线程的先后顺序执行，并且能保证一条线程执行完成后才开启另一条新的线程
            等价于
                 ExecutorService exec = Executors.newFixedThreadPool(1);
        newScheduledThreadPool
            计划线程池类，它能设置线程执行的先后间隔及执行时间等，功能比上面的三个强大了一些。
            ScheduledThreadPoolExecutor  exec = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(10);   //创建大小为10的线程池
            exec.schedule(new Handle(String.valueOf(i)), 10, TimeUnit.SECONDS);//延迟10秒执行

            scheduleAtFixedRate
                按指定频率周期执行某个任务
                public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
                long initialDelay,
                long period,
                TimeUnit unit);
                command：执行线程
                initialDelay：初始化延时
                period：两次开始执行最小间隔时间
                unit：计时单位

            scheduleWithFixedDelay
                周期定时执行某个任务/按指定频率间隔执行某个任务(注意)
                public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,
                long initialDelay,
                long delay,
                TimeUnit unit);
                command：执行线程
                initialDelay：初始化延时
                period：前一次执行结束到下一次执行开始的间隔时间（间隔执行延迟时间）
                unit：计时单位
            应用
                按指定频率周期执行某个任务
                    每隔2秒执行一次，注意，如果上次的线程还没有执行完成，那么会阻塞下一个线程的执行
                    ScheduledExecutorService executor = Executors.newScheduledThreadPool(10);
                    executor.scheduleAtFixedRate(new MyHandle(),0,2000,TimeUnit.MILLISECONDS);
                    间隔指的是连续两次任务开始执行的间隔。
                    对于scheduleAtFixedRate方法，当执行任务的时间大于我们指定的间隔时间时，它并不会在指定间隔时开辟一个新的线程并发执行这个任务。而是等待该线程执行完毕。
                按指定频率间隔执行某个任务
                    间隔指的是连续上次执行完成和下次开始执行之间的间隔。
                    ScheduledExecutorService executor = Executors.newScheduledThreadPool(10);
                    executor.scheduleWithFixedDelay(new MyHandle(),0,2000,TimeUnit.MILLISECONDS);
                周期定时执行某个任务
                    周期性的执行一个任务，可以使用下面方法设定每天在固定时间执行一次任务。
                    ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
                    long oneDay = 24 * 60 * 60 * 1000;
                    long initDelay  = getTimeMillis("21:00:00") - System.currentTimeMillis();
                    initDelay = initDelay > 0 ? initDelay : oneDay + initDelay;
                    executor.scheduleAtFixedRate(new MyHandle(),initDelay,oneDay,TimeUnit.MILLISECONDS);
    常用方法：
        submit
             将线程放入线程池中，除了使用execute，也可以使用submit，它们两个的区别是一个使用有返回值，一个没有返回值。
             submit的方法很适应于生产者-消费者模式，通过和Future结合一起使用，可以起到如果线程没有返回结果，就阻塞当前线程等待线程 池结果返回。
        execute
            表示往线程池添加线程，有可能会立即运行，也有可能不会。无法预知线程何时开始，何时线束。
        shutdown
            通常放在execute后面。
            如果调用 了这个方法，
                一方面，表明当前线程池已不再接收新添加的线程，新添加的线程会被拒绝执行。
                另一方面，表明当所有线程执行完毕时，回收线程池的资源。
                注意，它不会马上关闭线程池！
        shutdownNow
            不管当前有没有线程在执行，马上关闭线程池！
            这个方法要小心使用，要不可能会引起系统数据异常！
    总结：
        ThreadPoolExecutor中，包含了一个任务缓存队列和若干个执行线程，任务缓存队列是一个大小固定的缓冲区队列，用来缓存待执行的任务，执行线程用来处理待执行的任务。每个待执行的任务，都必须实现Runnable接口，执行线程调用其run()方法，完成相应任务。
        ThreadPoolExecutor对象初始化时，不创建任何执行线程，当有新任务进来时，才会创建执行线程。
        构造ThreadPoolExecutor对象时，需要配置该对象的核心线程池大小和最大线程池大小：
        当目前执行线程的总数小于核心线程大小时，所有新加入的任务，都在新线程中处理
        当目前执行线程的总数大于或等于核心线程时，所有新加入的任务，都放入任务缓存队列中
        当目前执行线程的总数大于或等于核心线程，并且缓存队列已满，同时此时线程总数小于线程池的最大大小，那么创建新线程，加入线程池中，协助处理新的任务。
        当所有线程都在执行，线程池大小已经达到上限，并且缓存队列已满时，就rejectHandler拒绝新的任务
ThreadLocal

concurrent
集合
atomic cas

voliate
    作用：
        内存可见性：
            基于缓存一致性协议，当用voliate关键字修饰的变量改动时，cpu会通知其他线程，缓存已被修改，需要更新缓存。这样每个线程都能获取到最新的变量值。
        防止指令重排
            可以防止cpu指令重排序。底层的实现方式是基于4种内存屏障：读读、读写、写读、读读屏障
    扩展之内存模型
        CPU、高速缓存、内存（物理内存）
        缓存不一致问题解决：
            通过在总线加LOCK#锁的方式
                CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。
            通过缓存一致性协议
                MESI协议保证了每个缓存中使用的共享变量的副本是一致的
                当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，
                    会发出信号通知其他CPU将该变量的缓存行置为无效状态，
                    因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。
    并发的三个概念
        原子性
            即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
        可见性
            可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
        有序性
            即程序执行的顺序按照代码的先后顺序执行
            指令重排序
                处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。
                进行重排序时是会考虑指令之间的数据依赖性
                指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。
    Java内存模型
        Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，
            以实现让Java程序在各种平台下都能达到一致的内存访问效果。
        定义的内容：
            它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序
            为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。
        Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）
        线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。

        Java语言 本身对 原子性、可见性以及有序性提供了哪些保证
            原子性
                对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。
                只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。
                Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。
                    由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。
            可见性
                Java提供了volatile关键字来保证可见性
                当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。
                普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。
                通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。
                    因此可以保证可见性。
            有序性
                在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。
                可以通过volatile关键字来保证一定的“有序性”。
                    另外可以通过synchronized和Lock来保证有序性。
                happens-before原则（先行发生原则）
                    程序次序规则
                        一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作
                            这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。
                    锁定规则
                        一个unLock操作先行发生于后面对同一个锁的lock操作
                            无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作
                    volatile变量规则
                        对一个变量的写操作先行发生于后面对这个变量的读操作
                            如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作
                    传递规则
                        如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作
                            体现happens-before原则具备传递性
                    线程启动规则
                        Thread对象的start()方法先行发生于此线程的每个一个动作
                    线程中断规则
                        对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生
                    线程终结规则
                        线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行
                    对象终结规则
                        一个对象的初始化完成先行发生于他的finalize()方法的开始
    剖析volatile
        两层语义
            保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。
            禁止进行指令重排序
                使用volatile关键字会强制将修改的值立即写入主存
                使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效
                由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。
        volatile保证原子性吗？
            可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。
            自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。
            自增操作也会出问题
                线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。
                java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。
                    atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。
    volatile能保证有序性吗？
        禁止指令重排有两层意思
            当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；
            在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。
    volatile的原理和实现机制
        观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令
        lock前缀指令实际上相当于一个内存屏障（也成内存栅栏）
            它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；
            它会强制将对缓存的修改操作立即写入主存；
            如果是写操作，它会导致其他CPU中对应的缓存行无效。
    使用volatile关键字的场景
        使用volatile必须具备以下2个条件：
            对变量的写操作不依赖于当前值
            该变量没有包含在具有其他变量的不变式中

