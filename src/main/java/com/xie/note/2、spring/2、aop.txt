1、定义：
    这种在运行时生成代理对象来织入的，还可以在编译期、类加载期织入，动态地将代码在不改变原有的逻辑情况下切入到类的指定方法、
    指定位置上的编程思想就是面向切面的编程。
2、组成部分
    通知（Advice）
        AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。
    连接点（Join point）
        连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。
    切点（PointCut）
        一组连接点的总称,用于指定某个增强应该在何时被调用。可以插入增强处理的连接点。
    切面（Aspect）
        切面是通知和切点的结合。
    引入（Introduction  x）
        允许我们向现有的类添加新的方法或者属性。
    织入（Weaving）
        将增强处理添加到目标对象中，并创建一个被增强的代理对象。
3、AOP Proxy
    （1）JDK动态代理
        Spring AOP中默认使用的方式，但是只能为接口实现动态代理
        原理：
            JDK动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。
            InvocationHandler是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，
                动态将横切逻辑和业务逻辑编制在一起。
            Proxy利用InvocationHandler动态创建一个符合某一接口的实例，生成目标类的代理对象。
    （2）CGLIB代理
        如果类没有实现接口，就需要使用CGLIB作为代理
        可以在运行期扩展Java类与实现Java接口，CGLib封装了asm，可以再运行期动态生成新的class
        由于其使用ASM字节码操作库，相对于JDK动态代理而言效率稍低
4、